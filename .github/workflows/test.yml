name: Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Cancel already running jobs
concurrency:
  group: testing_${{ github.head_ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: Ubuntu 18.04 - Release
            runner: ubuntu-18.04
            cargo_profile: --release
          - name: Ubuntu 18.04 - Debug
            runner: ubuntu-18.04
            cargo_profile:
          - name: Ubuntu 20.04 - Debug
            runner: ubuntu-20.04
            cargo_profile:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
          # `toolchain: stable` results in the latest stable toolchain being installed.
          # However as soon as we use cargo the real version specified in rust-toolchain.toml replaces the stable toolchain.
          #
          # When something like https://github.com/actions-rs/toolchain/pull/184 lands we can delete this line and get a nice speedup
          profile: minimal
          toolchain: stable
    - uses: Swatinem/rust-cache@v1
      with:
        # rust-cache already handles all the sane defaults for caching rust builds.
        # However because we are running seperate debug/release builds in parallel,
        # we also need to add Debug or Release to the key so that a seperate cache is used.
        # Otherwise only the last build to finish would get saved to the cache.
        key: ${{ matrix.name }}
    - name: Install ubuntu packages
      run: shotover-proxy/build/install_ubuntu_packages.sh
    - name: Install cargo-hack
      run: cargo install cargo-hack --version 0.5.8
    - name: Check `cargo fmt` was run
      run: cargo fmt --all -- --check
    - name: Ensure that all crates compile and have no warnings under every possible combination of features
      # some things to explicitly point out:
      # * clippy also reports rustc warnings and errors
      # * clippy --all-targets causes clippy to run against tests and examples which it doesnt do by default.
      run: cargo hack --feature-powerset clippy --all-targets --locked ${{ matrix.cargo_profile }} -- -D warnings
    - name: Ensure that tests pass
      run: cargo test ${{ matrix.cargo_profile }} -- --include-ignored --show-output
      # can not run tests if cpp driver not installed
      if: ${{ matrix.runner == 'ubuntu-18.04' }}
    - name: License Check
      run: |
        cargo install --locked cargo-deny
        cargo deny check licenses
      if: ${{ matrix.name == 'Ubuntu 20.04 - Debug' }}
